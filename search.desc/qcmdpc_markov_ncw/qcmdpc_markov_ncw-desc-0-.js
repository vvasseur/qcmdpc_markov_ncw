searchState.loadedDescShard("qcmdpc_markov_ncw", 0, "QC-MDPC Markovian Model\nAlpha parameter used in distribution trimming\nDefault compression level for zstd output files\nThreshold for exact/approximate factorial calculation\nStructures needed for working with QC-MDPC codes\nComputation of absorbing probabilities for Decoding …\nConvolutions and other operations on probability …\nSimple error handling for the QC-MDPC Markovian model.\nArithmetic in log domain using the <code>F64Log</code> type.\nCore of the computation in the Markov chain.\nUtilities for input/output.\nThreshold functions for MDPC decoding using <em>evalexpr</em>.\nDegree distribution of a single block\nRepresents the degree distribution of parity check nodes …\nStructure for an MDPC code.\nComputes degree distributions from a specific code given …\nColumn weight of the parity-check matrix\nDegree distribution of parity check nodes\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses code degrees from a JSON string representation.\nNumber of circulant blocks\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCode length\nCreates a new <code>MDPCCode</code> instance with parameter validation\nCreates a new <code>CodeDegrees</code> instance with the given degree …\nBlock length\nRow weight of the parity-check matrix\nIterator that computes and returns DFR (Decoding Failure …\nCompute absorbing probabilities for Decoding Failure Rate …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdd vectors element-wise.\nConvolve two distributions.\nConvolve all distributions in an iterator.\nGenerates all convolution powers of a distribution.\nPerforms ‘indexed’ convolution from the left side.\nComputes individual terms in convolution operations.\nSpecializes convolution with itself.\nNormalize distributions.\nA vector with offset and stride for efficient distribution …\nComputes the scalar product between distributions.\nSimplify distributions by keeping only most significant …\nRemoves zero values from distributions.\nTruncate a distribution by setting values &gt;= threshold to …\nPerforms element-wise addition of two distributions, …\nComputes the convolution up to a maximum index.\nConvolves all elements in this iterator together up to …\nComputes convolution powers from 0 to <code>n</code>.\nComputes <code>Z[i] = X[i] ⊗ Y[idx - i]</code> up to <code>max_idx</code>.\nComputes one convolution term for given indices.\nOptional convolution that returns None for empty results.\nComputes self-convolution up to <code>max_idx</code>.\nOptional self-convolution returning None for empty results.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalculates the top K products between distributions and …\nNormalize a distribution by dividing all values by their …\nOffset of the vector.\nCalculates the scalar product of two distributions.\nSimplify a distribution by keeping the <code>alpha</code> most …\nSplits a vector into odd and even indexed elements.\nStride between elements, where …\nReturns a distribution with leading and trailing zeros …\nTruncate values &gt;= threshold and renormalize.\nThe underlying vector data.\nConfiguration and parameter validation errors\nContains the error value\nMain error type for all operations.\nInput/Output related errors\nModel computation errors\nContains the success value\nParsing errors\nConvenience type alias for Results in this crate.\nCreate a configuration error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a model error\nCreate a parsing error\nA type for performing arithmetic in log domain to handle …\nConverts the <code>F64Log</code> back to a regular <code>f64</code> value\nCalculates binomial distribution probabilities according …\nCompute binomial coefficient in log space using factorials\nComputes <code>1 - p</code>\nCompute factorial in log space using Stirling’s …\nReturns the argument unchanged.\nCreates an <code>F64Log</code> directly from a natural log value and …\nCalculates hypergeometric distribution coefficients for a …\nCompute a single coefficient in the hypergeometric …\nCalls <code>U::from(self)</code>.\nReturns whether this value is zero\nReturns the natural logarithm of the absolute value\nCalculates the cumulative distribution function (CDF) of …\nCalculates the probability mass function (PMF) of the …\nCreates a new <code>F64Log</code> from a regular <code>f64</code> by computing its …\nConverts a probability mass function (PMF) to a cumulative …\nRaises the value to an <code>f64</code> power\nBlocked or failed decoding state.\nBlocked or failed decoding state.\nValid state with syndrome weight <code>s</code> and error weight <code>t</code>.\nInitial state model for ST (syndrome weight, error weight) …\nSimple model using syndrome weight (<code>s</code>) and error weight (<code>t</code>…\nState of an MDPC code decoding process using syndrome …\nValid state with syndrome weight <code>s</code>, error weight <code>t</code>, and …\nSTUB model using syndrome weight (<code>s</code>), error weight (<code>t</code>), …\nCounter model for STUB states\nInitial states distribution model for STUB states\nState of an MDPC code decoding process using syndrome …\nThis module provides the basis models that other derived …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes the rho values for given parameters\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new ST model instance.\nCreates a new ST initial state model instance.\nCreates a new STUB specific counter model instance.\nCreates a new STUB model instance.\nCreates a new STUB specific initial state model instance.\nSplits initial distribution by the value of u parameter\nTraits for the Markov chain models.\nCounters for good and bad positions in the MDPC code\nCounters for good, suspicious, erroneous, and bad …\nBasic state representation for MDPC decoding with syndrome …\nBasic counter model for ST (syndrome weight, error weight) …\nBasic initial state model for ST (syndrome weight, error …\nBasic state representation for MDPC decoding with syndrome …\nBasic counter model for STU states with specific degree …\nBasic initial state model for STU states with specific …\nProbability distribution for positions in the error vector …\nProbability distribution for positions in both the nearest …\nComputes the probabilities for the STU model\nProbability distribution for positions unrelated to the …\nComputes transitions for the counters.\nComputes transitions for the counters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a counter for the given state\nGenerates the initial state distribution for a given error …\nProbability distribution for positions not in the error …\nProbability distribution for positions unrelated to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the “locking” probability.\nComputes the “locking” probability.\nCreates a new ST basic counter model instance.\nCreates a new ST basic initial state model instance.\nCreates a new STU basic specific counter model instance.\nCreates a new STU basic specific initial state model …\nSyndrome weight\nSyndrome weight\nProbability distribution for positions in the nearest near …\nError weight\nError weight\nNumber of common bits with nearest near codeword\nModifies probability arrays for “good” and “bad” …\nModifies probability arrays for “good”, “suspicious…\nCounters associated with states in MDPC code decoding.\nThe counter type associated with this model.\nDefines an interface for counter-based models in MDPC …\nDefines an interface for initial states distribution in …\nState in the MDPC decoding process.\nThe state type associated with this model.\nThe state type associated with this model.\nTransitions between states in the Markov chain.\nReturns the decoded state.\nComputes transitions for the counters based on the given …\nGets the probability distribution of counters for a state.\nGets the initial states probability distribution for a …\nReturns whether this state is absorbing in the Markov …\nReturns whether this state is a success in the Markov …\nGenerates an iterator of possible states for t between …\nComputes the “locking” probability for the given state …\nReturns the syndrome weight of the current state.\nReturns the error weight of the current state.\nReturns a blocked state based on the given state.\nComputes the possible next states and their transition …\nModifies the counters based on uniform sampling.\nReads state-value pairs from a reader in JSON format, …\nWrites state-value pairs to a writer in JSON format, with …\nMathematical expression that can be evaluated using …\nCollection of threshold expressions for MDPC decoding\nEvaluates the expression with the given code parameters …\nEvaluates all threshold expressions with the given code …\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses an expression from a string representation.\nParses a threshold from a JSON array of expression strings.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there are no threshold expressions.\nReturns the number of threshold expressions.\nCreates a new threshold from the given mathematical …\nCreates a new threshold collection from a vector of …")